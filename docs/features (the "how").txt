How do you use SolverPro?
What kind of things can SolverPro do?


        VARIABLES AND RELATIONS
Declare variables
    |> myVar := 3
    |> myVar = 3

Define variable relationships
    |> force = mass * acceleration

Print variables
    |> a = 3
    |> b = 4
    |> a^2 + b^2 = c^2
    |> c
        5

Use scientific notation
    |> big = 3E10
    |> big2 = 30000000000
    |> big2
        3E10
    |> small = 5E-10
    |> small2 = 0.0000000005
    |> small2
        5E-10


        CREATING ALIASES
Make an alias
    |> myAlias := myVar
    |> 1 + myVar = 6
    |> myAlias
        5
    |> 2 * myAlias = 8
    |> myVar
        4

Make alias templates
    |> myAlias(x, y) := x * y + another
    |> another = 1
    |> myAlias(3, 4)
        13


        SYSTEMS OBJECTS
Make a "systems object"
    |> myObj := {}

Set object properties
    |> myObj.someProp = 5

Print object properties
    |> block := { width = 5, area = width * height }
    |> block.width
        5
    |> block
        {width=5}(area=?, height=?)
    |> block.height = 10
    |> block
        {width=5, height=10}(area=50)

Use objects in relations
    |> obj := { a = 5 }
    |> obj.c - 2 = obj.a
    |> obj2 := { b = 8 }
    |> obj2.b - obj.c
        1

Define relations in object declarations
    |> g = 9.81
    |> block := { force = mass * g }
    |> block.mass = 5
    |> block.force
        49.05

Define sub-objects
    |> bigObj1 := { subObj1 = { val = 2 } }
    |> bigObj2.subObj2 := { val = 5 }
    |> bigObj2.subObj2.val - bigObj1.subObj1.val
        3


        CREATING AND ASSIGNING UNITS
Define variables with units
    |> variable = 5<units>
    |> position = 12<meters>

Create aliases for units
    |> <m> := <meters>

Printing answers with (inferred) units
    |> distance = 10<m>
    |> speed = 5<m/s>
    |> speed = distance / time
    |> time
        2s


        MERGING AND COPYING OBJECTS
Copy assignment to multiple variables
    |> [ some, hard, to, define, obj ] := { val = 7 }
    |> some.val
        7
    |> to.val
        7
    |> obj.val
        7

"Merge" objects together
    |> obj1 := { val1 = 4 }
    |> obj2 := { val3 = val1 + val2 }
    |> merged := (obj1, obj2) { val2 = 6 }
    |> merged
        {val1=4, val2=6}(val3=10)

Copy object (not an alias!)
    |> obj = { val = 3 }
    |> newObj_notAlias := (obj) {}
    |> newObj_notAlias := (obj)
    |> sameObj_isAlias := obj


        SPECIAL COMMANDS
Reset system state
    |> !reset
        Are you sure you want to reset?
    |> !reset
        Reset complete

Reset without confirmation
    |> !reset confirm

List program relations
    |> !list
        1:  a + b = c
        2:  obj1.val = obj2.val - 1
        3:  a = 5
        4:  b = 7
        5:  c = 3

List relations given variables/objects
    |> !list a
        1:  a + b = c
        3:  a := 5
    |> !list obj1
        2:  obj1.val = obj2.val - 1
    |> !list a, b
        1:  a + b = c
    |> !list obj2.val
        2: obj1.val = obj2.val - 1

Forget/delete previous relations
    |> !list
        1:  a + b = c
        2:  obj1.val = obj2.val - 1
        3:  a := 5
        4:  b := 7
        5:  c := 3
    |> !forget 3, 4
    |> !list
        1:  a + b = c
        2:  obj1.val = obj2.val
        5:  c := 3
    |> !list a
        1: a + b = c

Forget value assignments to variables/objects
    |> !list
        1:  a + b = c
        2:  obj1.val = obj2.val - 1
        3:  a := 5
        4:  b := 7
        5:  c := 3
    |> !forget a
    |> !list
        1:  a + b = c
        2:  obj1.val = obj2.val - 1
        4:  b := 7
        5:  c := 3

Export a program to a file
    |> !save /path/to/myPlainFile.txt
        Saved as plain text to "myPlainFile.txt"
    |> !save /path/to/myProgFile.slv
        Saved as optimized file to "myProgFile.slv"

Evaluate a previously saved program
    |> !eval /path/to/myPlainFile.txt
    |> !eval /path/to/myProgFile.slv
